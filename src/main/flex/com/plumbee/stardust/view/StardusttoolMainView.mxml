<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:view="com.plumbee.stardust.view.*"
         initialize="initializeCanvasesForEmitters()"
         width="100%"
         height="100%" >

    <fx:Script><![CDATA[
        import com.plumbee.stardust.controller.events.StartSimEvent;
        import com.plumbee.stardust.helpers.Globals;
        import com.plumbee.stardust.helpers.Stats;
        import com.plumbee.stardust.view.events.MainViewLoadSimEvent;
        import com.plumbee.stardust.view.events.MainViewSaveSimEvent;

        import mx.collections.ArrayCollection;
        import mx.logging.ILogger;
        import mx.logging.Log;


        import starling.core.Starling;

        private static const LOG : ILogger = Log.getLogger( getQualifiedClassName( StardusttoolMainView ).replace( "::", "." ) );

        public static const leftColumnWidth : int = 600;
        private const _initializerAC : ArrayCollection = new ArrayCollection();
        private const _actionAC : ArrayCollection = new ArrayCollection();

        private function initializeCanvasesForEmitters() : void
        {
            previewGroup.mx_internal::$addChild( Globals.canvas );
            statsHolder.mx_internal::$addChild( new Stats() );
        }

        public function resizeStarlingViewPort() : void
        {
            var viewPortRectangle : Rectangle = new Rectangle();
            viewPortRectangle.width = stage.stageWidth;
            viewPortRectangle.height = stage.stageHeight;
            Starling.current.viewPort = viewPortRectangle;
            Starling.current.stage.stageWidth = stage.stageWidth;
            Starling.current.stage.stageHeight = stage.stageHeight;
        }

        public function get initializerAC() : ArrayCollection
        {
            return _initializerAC;
        }

        public function get actionAC() : ArrayCollection
        {
            return _actionAC;
        }

        private function dispatchStartSimEvent() : void
        {
            dispatchEvent( new StartSimEvent() );
        }

        private function dispatchLoadSimEvent() : void
        {
            dispatchEvent( new MainViewLoadSimEvent( MainViewLoadSimEvent.LOAD ) );

        }

        private function dispatchSaveSimEvent() : void
        {
            dispatchEvent( new MainViewSaveSimEvent( MainViewSaveSimEvent.SAVE ) );
        }

        public function updateStagePosition() : void
        {
            canvasPosition.validateNow();
            if ( canvasPosition.centerRadioButton.selected )
            {
                //validate to force correct size for background.
                validateNow();
                previewGroup.x = background.width * 0.5;
                previewGroup.y = stage.stageHeight * 0.5;
                if ( canvasPosition.centerBackgroundCheckBox.selected )
                {
                    backgroundProvider.setBgImagePosition(previewGroup.x, previewGroup.y);
                }
                else
                {
                    backgroundProvider.setBgImagePosition(0, 0);
                }
            }
            else
            {
                previewGroup.x = 0;
                previewGroup.y = 0;
                backgroundProvider.setBgImagePosition(0, 0);
            }
            Globals.starlingCanvas.x = previewGroup.x + leftColumnWidth;
            Globals.starlingCanvas.y = previewGroup.y;
        }
        ]]></fx:Script>

    <s:Group left="{leftColumnWidth}" right="100" height="100%">
        <mx:UIComponent id="background" width="100%" height="100%"/>
        <s:Group id="previewGroup" mouseEnabled="false" mouseChildren="false"/>
    </s:Group>

    <s:VGroup height="100%" width="{leftColumnWidth}" paddingLeft="3" paddingTop="3" paddingBottom="3">

        <view:EmittersUIView id="emittersUIView"/>

        <view:StardustElementContainer label="Initializers"
                                       dataProviderAC="{_initializerAC}"
                                       dropdownListAC="{Globals.initializerDDLAC}"
                                       dataproviderDict="{Globals.initalizerDict}"
                                       height="100%" width="100%"/>

        <view:StardustElementContainer label="Actions"
                                       dataProviderAC="{_actionAC}"
                                       dropdownListAC="{Globals.actionsDDLAC}"
                                       dataproviderDict="{Globals.actionDict}"
                                       height="100%" width="100%"/>
    </s:VGroup>

    <s:VGroup height="100%" right="0">
        <s:Button label="Restart sim" click="dispatchStartSimEvent()" width="100%"/>
        <s:Button label="Load" click="dispatchLoadSimEvent()" width="100%"/>
        <s:Button label="Save as.." click="dispatchSaveSimEvent()" width="100%"/>
        <mx:Spacer height="13"/>
        <s:CheckBox label="Zones visible" id="zonesVisibleCheckBox"/>
        <view:BackgroundProvider background="{background}" width="100%" id="backgroundProvider"/>
        <view:CanvasPositionView mainView="{this}" id="canvasPosition" />
        <s:Spacer height="100%"/>
        <mx:UIComponent id="statsHolder" height="125"/>
    </s:VGroup>

    <s:Label id="infoLabel" bottom="5" right="5" backgroundColor="0x11183D"
             paddingBottom="3" paddingLeft="3" paddingRight="3" paddingTop="3"/>

</s:Group>
