<?xml version="1.0"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:components="spark.components.*"
          paddingBottom="4" paddingTop="4" paddingLeft="4" paddingRight="4"
          toolTip="Set a background/foreground for the simulation. The image *will* be saved with the simulation, which is likely something you dont want for the final version.">

    <fx:Script><![CDATA[
        import com.funkypandagame.stardust.controller.events.BackgroundChangeEvent;

        import mx.logging.ILogger;
        import mx.logging.Log;

        import starling.core.Starling;
        import starling.display.Image;
        import starling.display.Quad;
        import starling.textures.Texture;

        private static const LOG : ILogger = Log.getLogger(getQualifiedClassName(BackgroundProvider).replace("::", "."));

        private var _starlingBackground : starling.display.DisplayObject;
        private var bgX : uint;
        private var bgY : uint;
        private var bgWidth : uint;
        private var bgHeight : uint;

        private function onHasBGChange() : void
        {
            dispatchEvent(new BackgroundChangeEvent(BackgroundChangeEvent.HAS_BACKGROUND, hasBackgroundCheckBox.selected));
        }

        private function onColorChange() : void
        {
            dispatchEvent(new BackgroundChangeEvent(BackgroundChangeEvent.COLOR, colorPicker.selectedItem));
        }

        private function onLoadImageClick() : void
        {
            dispatchEvent(new BackgroundChangeEvent(BackgroundChangeEvent.IMAGE, null));
        }

        public function setBgImagePosition(xc : Number, yc : Number, wi : Number, he : Number) : void
        {
            bgX = xc;
            bgY = yc;
            bgWidth = wi;
            bgHeight = he;
            positionBg();
        }

        private function positionBg() : void
        {
            if (_starlingBackground)
            {
                if (_starlingBackground is Image)
                {
                    _starlingBackground.x = bgX;
                    _starlingBackground.y = bgY;
                }
                else
                {
                    Quad(_starlingBackground).width = bgWidth;
                    Quad(_starlingBackground).height = bgHeight;
                    _starlingBackground.x = StardusttoolMainView.leftColumnWidth;
                    _starlingBackground.y = 0;
                }
            }
        }

        public function setData(hasBackground : Boolean, backgroundColor : uint, backgroundImage : DisplayObject) : void
        {
            if (_starlingBackground && _starlingBackground.parent)
            {
                _starlingBackground.removeFromParent();
                _starlingBackground.dispose();
            }

            hasBackgroundCheckBox.selected = hasBackground;
            if (hasBackground)
            {
                if (backgroundImage)
                {
                    _starlingBackground = new Image(Texture.fromBitmapData(Bitmap(backgroundImage).bitmapData));
                    Starling.current.stage.addChildAt(_starlingBackground, 0);
                }
                else
                {
                    colorPicker.selectedItem = backgroundColor;
                    colorPicker.selectedColor = backgroundColor;

                    _starlingBackground = new Quad(bgWidth, bgHeight, backgroundColor);
                    Starling.current.stage.addChildAt(_starlingBackground, 0);
                }
                positionBg();
            }
        }

        private function onActAsForegroundChange() : void
        {
            if (_starlingBackground)
            {
                if (actAsForegroundCheckBox.selected)
                {
                    Starling.current.stage.setChildIndex(_starlingBackground, Starling.current.stage.numChildren);
                }
                else
                {
                    Starling.current.stage.setChildIndex(_starlingBackground, 0);
                }
            }
        }
        ]]></fx:Script>

    <s:Rect includeInLayout="false" width="{width}" height="{height}">
        <s:stroke>
            <s:SolidColorStroke color="0x787878"/>
        </s:stroke>
        <s:fill>
            <s:SolidColor color="0x2F3B3F"/>
        </s:fill>
    </s:Rect>

    <s:CheckBox label="Background?" change="onHasBGChange()" id="hasBackgroundCheckBox"/>

    <s:VGroup enabled="{hasBackgroundCheckBox.selected}">
        <s:CheckBox label="Act as foreground" change="onActAsForegroundChange()" id="actAsForegroundCheckBox" />

        <s:HGroup verticalAlign="middle">
            <s:Label text="color"/>
            <components:ColorPicker id="colorPicker" change="onColorChange()" />
        </s:HGroup>

        <s:Button label="Or image" click="onLoadImageClick()" width="100%"/>
    </s:VGroup>


</s:VGroup>
