<?xml version="1.0"?>
<twod:PropertyRendererBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                           xmlns:twod="com.funkypandagame.stardust.view.stardust.twoD.*"
                           toolTip="Causes particles to bounce back/change position when hitting obstacles"
                           initialize="init()"
                           nameText="Deflect">

    <fx:Script><![CDATA[
        import com.funkypandagame.stardust.helpers.DropdownListVO;

        import com.funkypandagame.stardust.view.stardust.twoD.actions.deflectors.CircleDeflectorRenderer;
        import com.funkypandagame.stardust.view.stardust.twoD.actions.deflectors.LineDeflectorRenderer;
        import com.funkypandagame.stardust.view.stardust.twoD.actions.deflectors.WrappingBoxRenderer;

        import idv.cjcat.stardustextended.twoD.actions.Deflect;
        import idv.cjcat.stardustextended.twoD.deflectors.CircleDeflector;
        import idv.cjcat.stardustextended.twoD.deflectors.Deflector;
        import idv.cjcat.stardustextended.twoD.deflectors.LineDeflector;
        import idv.cjcat.stardustextended.twoD.deflectors.WrappingBox;

        import mx.collections.ArrayCollection;
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;

        private const deflectorAC:ArrayCollection = new ArrayCollection();
        private static const deflectorDict:Dictionary = new Dictionary();
        private static const deflectorDDLAC:ArrayCollection = new ArrayCollection();

        private function init():void {
            if (deflectorDict[CircleDeflector] == undefined) {
                deflectorDict[CircleDeflector] = new DropdownListVO("Circle", CircleDeflector, CircleDeflectorRenderer);
                deflectorDict[WrappingBox] = new DropdownListVO("Wrapping box", WrappingBox, WrappingBoxRenderer);
                deflectorDict[LineDeflector] = new DropdownListVO("Line", LineDeflector, LineDeflectorRenderer);
                for each (var ddlVO:DropdownListVO in deflectorDict) {
                    deflectorDDLAC.addItem(ddlVO);
                }
            }
            deflectorAC.addEventListener(CollectionEvent.COLLECTION_CHANGE, onACChange);
        }

        private function onACChange(e:CollectionEvent):void {
            var dat:Deflect = data as Deflect;
            var deflector:Deflector = Deflector(e.items[0]);
            if (e.kind == CollectionEventKind.ADD) {
                dat.addDeflector(deflector);
            }
            if (e.kind == CollectionEventKind.REMOVE) {
                dat.removeDeflector(deflector);
            }
        }

        override public function set data(d:Object):void {
            super.data = d;
            if (d == null) {
                return;
            }
            var dat:Deflect = data as Deflect;
            deflectorAC.removeAll();
            for (var i:int = 0; i < dat.deflectors.length; i++) {
                deflectorAC.addItem(dat.deflectors[i]);
            }
        }

        private function addDeflector():void {
            var cl:Class = DropdownListVO(deflectorDropdownList.selectedItem).stardustClass;
            deflectorAC.addItem(new cl());
        }

        private static function deflectorIRFunction(item:Object):IFactory {
            return new ClassFactory(DropdownListVO(deflectorDict[item.constructor]).viewClass);
        }
        ]]></fx:Script>

    <twod:layout>
        <s:VerticalLayout/>
    </twod:layout>

    <s:HGroup width="100%" verticalAlign="middle">
        <s:DropDownList id="deflectorDropdownList" width="160" requireSelection="true"
                        dataProvider="{deflectorDDLAC}" labelField="name" selectedIndex="0"/>
        <s:Button label="Add deflector" click="addDeflector()"/>
    </s:HGroup>

    <s:DataGroup width="100%" dataProvider="{deflectorAC}"
                 itemRendererFunction="deflectorIRFunction">
        <s:layout>
            <s:VerticalLayout gap="3"/>
        </s:layout>
    </s:DataGroup>

</twod:PropertyRendererBase>
