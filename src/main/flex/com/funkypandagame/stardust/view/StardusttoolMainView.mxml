<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="com.funkypandagame.stardust.view.*"
         width="100%"
         height="100%">

    <fx:Script><![CDATA[
        import com.funkypandagame.stardust.controller.events.LoadSimEvent;
        import com.funkypandagame.stardust.controller.events.StartSimEvent;
        import com.funkypandagame.stardust.helpers.Globals;
        import com.funkypandagame.stardust.view.events.MainViewLoadSimEvent;
        import com.funkypandagame.stardust.view.events.MainViewSaveSimEvent;

        import mx.collections.ArrayCollection;
        import mx.logging.ILogger;
        import mx.logging.Log;
        import mx.managers.PopUpManager;

        import starling.core.Starling;

        private static const LOG:ILogger = Log.getLogger(getQualifiedClassName(StardusttoolMainView).replace("::", "."));

        public static const leftColumnWidth:int = 600;
        private const _initializerAC:ArrayCollection = new ArrayCollection();
        private const _actionAC:ArrayCollection = new ArrayCollection();
        private var examplesPopup : ExamplesPopup;

        public function resizeStarlingViewPort():void {
            var viewPortRectangle:Rectangle = new Rectangle();
            viewPortRectangle.width = stage.stageWidth;
            viewPortRectangle.height = stage.stageHeight;
            Starling.current.viewPort = viewPortRectangle;
            Starling.current.stage.stageWidth = stage.stageWidth;
            Starling.current.stage.stageHeight = stage.stageHeight;
        }

        public function get initializerAC():ArrayCollection {
            return _initializerAC;
        }

        public function get actionAC():ArrayCollection {
            return _actionAC;
        }

        private function dispatchStartSimEvent():void {
            dispatchEvent(new StartSimEvent());
        }

        private function dispatchLoadSimEvent():void {
            dispatchEvent(new MainViewLoadSimEvent(MainViewLoadSimEvent.LOAD));

        }

        private function dispatchSaveSimEvent():void {
            dispatchEvent(new MainViewSaveSimEvent(MainViewSaveSimEvent.SAVE));
        }

        public function updateStagePosition():void
        {
            canvasPosition.validateNow();
            if (canvasPosition.centerRadioButton.selected)
            {
                //validate to force correct size for background.
                validateNow();
                Globals.starlingCanvas.x = (width - leftColumnWidth) * 0.5 + leftColumnWidth;
                Globals.starlingCanvas.y = stage.stageHeight * 0.5;

            }
            else
            {
                Globals.starlingCanvas.x = leftColumnWidth;
                Globals.starlingCanvas.y = 0;
            }
            backgroundProvider.setBgImagePosition(Globals.starlingCanvas.x, Globals.starlingCanvas.y,
                                                  width - leftColumnWidth, height);
            previewGroup.x = Globals.starlingCanvas.x;
            previewGroup.y = Globals.starlingCanvas.y;
        }

        private function showExamples() : void
        {
            if (examplesPopup == null)
            {
                examplesPopup = new ExamplesPopup();
                examplesPopup.callback = loadExample;
            }
            PopUpManager.addPopUp(examplesPopup, this, true);
            PopUpManager.centerPopUp(examplesPopup);
        }

        private function loadExample(sdeFile : ByteArray, nameToDisplay : String) : void
        {
            dispatchEvent(new LoadSimEvent(sdeFile, nameToDisplay));
        }
        ]]></fx:Script>

    <s:Group id="previewGroup" mouseEnabled="false" mouseChildren="false" />

    <s:VGroup height="100%" width="{leftColumnWidth}" paddingLeft="3" paddingTop="3" paddingBottom="3">

        <view:EmittersUIView id="emittersUIView"/>

        <view:StardustElementContainer label="Initializers"
                                       dataProviderAC="{_initializerAC}"
                                       dropdownListAC="{Globals.initializerDDLAC}"
                                       dataproviderDict="{Globals.initalizerDict}"
                                       height="45%" width="100%"/>

        <view:StardustElementContainer label="Actions"
                                       dataProviderAC="{_actionAC}"
                                       dropdownListAC="{Globals.actionsDDLAC}"
                                       dataproviderDict="{Globals.actionDict}"
                                       height="55%" width="100%"/>
    </s:VGroup>

    <s:VGroup height="100%" right="0">
        <s:Button label="Restart sim" click="dispatchStartSimEvent()" width="100%"/>
        <s:Button label="Load" click="dispatchLoadSimEvent()" width="100%"/>
        <s:Button label="Save as.." click="dispatchSaveSimEvent()" width="100%"/>
        <s:Button label="Examples" click="showExamples()" width="100%"/>

        <mx:Spacer height="13"/>
        <s:CheckBox label="Zones visible" id="zonesVisibleCheckBox" toolTip="Makes the initial positions, death zones, deflectors, etc. visible for testing. The zone graphics will not be saved."/>
        <view:BackgroundProvider width="100%" id="backgroundProvider"/>
        <view:CanvasPositionView mainView="{this}" id="canvasPosition" />
        <s:Spacer height="100%"/>
        <mx:UIComponent id="statsHolder" height="125" />
    </s:VGroup>

    <s:Label id="infoLabel" bottom="5" right="5" backgroundColor="0x11183D"
             paddingBottom="3" paddingLeft="3" paddingRight="3" paddingTop="3"/>

</s:Group>
