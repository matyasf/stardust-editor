<?xml version="1.0"?>
<s:Application
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:view2="com.funkypandagame.stardust.view.*"
        backgroundColor="0x353535"
        backgroundAlpha="0"
        frameRate="60"
        applicationComplete="initApp()">

    <view2:StardusttoolMainView/>

    <fx:Script><![CDATA[

        import com.funkypandagame.stardust.model.ProjectModel;

        import com.funkypandagame.stardust.config.AppConfig;

        import com.funkypandagame.stardust.controller.events.LoadSimEvent;
        import com.funkypandagame.stardust.helpers.Globals;

        import flash.display3D.Context3DRenderMode;

        import mx.logging.Log;
        import mx.logging.targets.LineFormattedTarget;

        import robotlegs.bender.bundles.mvcs.MVCSBundle;
        import robotlegs.bender.extensions.contextView.ContextView;
        import robotlegs.bender.framework.api.IContext;
        import robotlegs.bender.framework.impl.Context;

        import starling.core.Starling;

        import starling.display.Sprite;
        import starling.events.Event;

        [Embed(source="../../../../resources/stardustProjectDEFAULT.sde", mimeType="application/octet-stream")]
        private var ExampleSim:Class;

        private var context:IContext;
        private var starlingInstance:Starling;
        private var externalSimToLoad : ByteArray;
        private var externalSimDisplayName : String;

        [Inject]
        public var model : ProjectModel;

        private function initApp():void {
            Globals.externalEventDispatcher = this;
            setupLogging();

            var flashVars : Object = root.loaderInfo.parameters;
            Globals.isRunningInAIR = flashVars['isRunningInAIR'] == "true";
            trace("Is running in AIR wrapper: ", Globals.isRunningInAIR);
            Globals.init();
            Starling.handleLostContext = true;
            starlingInstance = new Starling(starling.display.Sprite, stage, null, null, Context3DRenderMode.AUTO, "auto");
            starlingInstance.enableErrorChecking = isDebugBuild();
            starlingInstance.addEventListener(starling.events.Event.ROOT_CREATED, onStarlingReady);
            starlingInstance.antiAliasing = 1;
            starlingInstance.start();
            starlingInstance.stage.addChild(Globals.starlingCanvas);
            starlingInstance.showStats = true;
        }

        private static function isDebugBuild() : Boolean
        {
            var stackTrace : String = new Error().getStackTrace();
            return (stackTrace && stackTrace.search(/:[0-9]+]$/m) > -1);
        }

        // invoked from the AIR wrapper. Called after the applicationComplete event.
        public function loadExternalSim(sim : ByteArray, nameToDisplay : String) : void
        {
            externalSimToLoad = sim;
            externalSimDisplayName = nameToDisplay;
            if (context)
            {
                const dispatcher:IEventDispatcher = context.injector.getInstance(IEventDispatcher);
                dispatcher.dispatchEvent(new LoadSimEvent(externalSimToLoad, externalSimDisplayName));
            }
        }

        private function onStarlingReady(event:starling.events.Event):void {
            context = new Context();
            context.install(MVCSBundle).configure(AppConfig).configure(new ContextView(this));
            context.injector.injectInto(this);

            const dispatcher:IEventDispatcher = context.injector.getInstance(IEventDispatcher);
            if (externalSimToLoad)
            {
                dispatcher.dispatchEvent(new LoadSimEvent(externalSimToLoad, externalSimDisplayName));
            }
            else
            {
                dispatcher.dispatchEvent(new LoadSimEvent(new ExampleSim(), "Untitled"));
            }
        }

        private static function setupLogging():void
        {
            var consoleLogTarget:LineFormattedTarget = new LineFormattedTarget();
            consoleLogTarget.includeTime = true;
            consoleLogTarget.includeLevel = false;
            Log.addTarget(consoleLogTarget);
        }
        ]]>
    </fx:Script>

    <fx:Style>
        @namespace mx "library://ns.adobe.com/flex/mx";
        @namespace s "library://ns.adobe.com/flex/spark";
        @namespace ns "http://flex.apache.org/experimental/ns";

        mx|ToolTip {
            fontSize: 14px;
            backgroundColor: #7FB290;
        }

        s|DropDownList {
            skinClass: ClassReference("com.funkypandagame.stardust.view.skins.DropdownListSkin");
        }

        s|List {
            contentBackgroundColor: #2F3B3F;
            selectionColor: #11183D;
            rollOverColor: #696969;
        }

        s|Label {
            color: #D0D0D0;
        }

        s|TextInput {
            color: #DADADA;
            contentBackgroundColor: #0E2D38;
        }

        s|Button {
            color: #D0D0D0;
            skinClass: ClassReference("com.funkypandagame.stardust.view.skins.ButtonSkin");
        }

        s|TitleWindow {
            backgroundColor: #2F3B3F;
            skinClass: ClassReference("com.funkypandagame.stardust.view.skins.TitleWindowSkin");
        }

        s|Panel {
            backgroundColor: #2F3B3F;
            skinClass: ClassReference("com.funkypandagame.stardust.view.skins.PanelSkin");
        }

        ns|Alert {
            backgroundColor: #2F3B3F;
            skinClass: ClassReference("com.funkypandagame.stardust.view.skins.AlertSkin");
        }
    </fx:Style>
</s:Application>
